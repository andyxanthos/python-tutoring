# -*- coding: utf-8 -*-
"""9-16 Tutoring.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1vPanEhvBZHYfJvbL6Ps4StVUaMOEt6L-

#Control Flow
"""

# the conditions in if statements evaluate the "truthiness" of statements and
# make decisions based on that
if True:
  # because True is pretty much the definition of "truthy,"
  # this code will always run
  print("This code will always run.")
else:
  print("This code will never run.")

# if the if statement's condition does not evaluate to True,
# the "else" part takes over.
if False:
  # likewise, False is the definition of "falsy"
  print("This will never run.")
else:
  print("This code will always run.")

"""## Exploring True and False
Like I mentioned above, if statements function based on the truthiness of the condition they're given. Here's the basic outline.



```
# if condition:
# . . # run this block if the condition is true
# elif condition:
# . . # run this block if the first condition was false, but this condition is true
# else:
# . . # run this block if all of the above conditions are false
```
"""

# We can print() comparison statements to figure out if they are true or false.

print(8 < 3) # Should print "False"

print(1 >= 1) # Should print "True"

print(1 == 3) # Should print "False"

print('A' == 'a') # Should print "False"

# Remember to use double-equals "==" when comparing values!

# True and False can be slightly less intuitive sometimes though.
# We can use the bool() function to covert to boolean.

print(bool("")) # Empty strings are false.

print(bool("Hello world!")) # Strings with >0 characters are true.

print(bool(0)) # Zero is false

# Any other int or float is true.
print(bool(1))
print(bool(3.14))

number_of_books = 25

# Here, the condition will evaluate to False, so the "else" block is run.
if number_of_books > 50:
  print("Wow, you have a lot of books.")
else:
  print("You don't have that many books.")

"""## Complex Example

If statements are useful because they allow your code to do different things under different circumstances, as opposed to simply executing from top to bottom.
"""

grades = [99, 65, 80, 82, 91, 94, 73, 77, 84, 90]

# We will be covering loops in the next chapter I think.
for i, grade in enumerate(grades, start=1):
  if grade < 80:
    print(f"Student #{i} scored {grade}. They may need extra help.")
  else:
    print(f"Student #{i} scored {grade}. They're doing okay.")